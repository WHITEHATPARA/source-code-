import datetime
import csv
import cv2
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import dlib
import numpy as np
from scipy.spatial.distance import cosine

class FaceRecognitionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Face Recognition App")
        self.root.geometry("800x600")
        self.root.configure(background="black")

        self.header_label = tk.Label(root, text="Face Recognition App", font=("Arial", 24, "bold"), fg="white", bg="black")
        self.header_label.pack(pady=20)

        self.name_label = tk.Label(root, text="Enter your name:", font=("Arial", 14), fg="white", bg="black")
        self.name_label.pack()

        self.name_entry = tk.Entry(root, font=("Arial", 12))
        self.name_entry.pack()

        self.status_label = tk.Label(root, text="", font=("Arial", 14), fg="white", bg="black")
        self.status_label.pack()

        self.clock_label = tk.Label(root, text="", font=("Arial", 14, "bold"), fg="white", bg="black")
        self.clock_label.pack()

        self.canvas_frame = tk.Frame(root, bg="white", bd=5)
        self.canvas_frame.pack(pady=20)

        self.canvas = tk.Canvas(self.canvas_frame, width=640, height=480)
        self.canvas.pack()

        self.face_detected = False
        self.last_frame_rgb = None

        self.face_detector = dlib.get_frontal_face_detector()
        self.smile_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')  # Smile cascade classifier
        self.face_recognizer = self.load_face_recognizer()  # Load face recognition model
        
        self.known_faces = {}  # Dictionary to store known face embeddings

        self.detect_faces()

    def load_face_recognizer(self):
        # Load pre-trained face recognition model
        # Replace this with your own code to load the model
        pass

    def save_data(self, name):
        if name:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%I-%M-%p")
            image_filename = f"{name}_{timestamp}.jpg"
            cv2.imwrite(image_filename, cv2.cvtColor(self.last_frame_rgb, cv2.COLOR_RGB2BGR))  # Save image
            self.save_to_csv(name, timestamp, image_filename)
            messagebox.showinfo("Success", "Name, timestamp, and image saved successfully!")
            self.name_entry.delete(0, tk.END)  # Clear name entry field after saving
        else:
            messagebox.showwarning("Error", "Please enter your name before saving the image.")

    def save_to_csv(self, name, timestamp, image_filename):
        formatted_timestamp = datetime.datetime.strptime(timestamp, "%Y-%m-%d_%I-%M-%p").strftime("%Y-%m-%d %I:%M %p")
        with open("data.csv", "a", newline="") as file:
            writer = csv.writer(file)
            writer.writerow([name, formatted_timestamp, image_filename])

    def recognize_faces(self, frame):
        # Convert the frame to grayscale for face recognition
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Detect faces in the frame
        faces = self.face_detector(gray, 0)

        # Initialize flag to check if any face is detected
        face_detected = False

        # Recognize faces and update GUI
        for face in faces:
            face_detected = True  # Set flag to True if at least one face is detected

            # Extract face embeddings
            face_embedding = self.extract_face_embedding(frame, face)

            # Compare face embeddings with known faces
            for name, known_embedding in self.known_faces.items():
                # Compare embeddings using cosine distance
                distance = cosine(face_embedding, known_embedding)
                if distance < 0.6:  # Adjust threshold as needed
                    self.status_label.config(text=f"Welcome, {name}!", fg="green")
                    break
            else:
                # Don't set label here
                pass

            # Draw bounding box around detected face
            x, y, w, h = face.left(), face.top(), face.width(), face.height()
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

            # Detect smile within the face region
            smile = self.detect_smile(gray[y:y+h, x:x+w])
            if smile:
                self.save_data(name="smile")

        # Update label if no known face detected and at least one face is detected
        if not self.face_detected and face_detected:
            self.status_label.config(text="Unknown Face", fg="red")

        # Update face detected flag
        self.face_detected = face_detected

        return frame

    def extract_face_embedding(self, frame, face):
        # Extract face region from frame
        x, y, w, h = face.left(), face.top(), face.width(), face.height()
        face_region = frame[y:y+h, x:x+w]

        # Perform face embedding extraction using pre-trained model
        # Replace this with your own code to extract face embeddings
        face_embedding = None

        return face_embedding

    def detect_smile(self, face_gray):
        # Detect smile in the face region
        smiles = self.smile_detector.detectMultiScale(face_gray, scaleFactor=1.8, minNeighbors=20, minSize=(25, 25))
        return len(smiles) > 0

    def detect_faces(self):
        # Initialize the video capture object
        cap = cv2.VideoCapture(0)  # Use 0 for default webcam, or an index for another camera

        while True:
            # Capture a frame from the webcam
            ret, frame = cap.read()

            if ret:
                # Convert the frame to RGB format
                self.last_frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # Recognize faces and update GUI
                frame_with_faces = self.recognize_faces(frame)

                # Convert the frame to RGB format and display it on the canvas
                img = Image.fromarray(cv2.cvtColor(frame_with_faces, cv2.COLOR_BGR2RGB))
                imgtk = ImageTk.PhotoImage(image=img)
                self.canvas.create_image(0, 0, anchor=tk.NW, image=imgtk)

                # Update the clock label
                current_time = datetime.datetime.now().strftime("%H:%M:%S")
                self.clock_label.config(text=current_time)

                # Update the window and handle events
                self.root.update_idletasks()
                self.root.update()

            # Exit the loop if the window is closed
            if not self.root.winfo_exists():
                break

        # Release the capture object and close all windows
        cap.release()

if __name__ == "__main__":
    root = tk.Tk()
    app = FaceRecognitionApp(root)
    root.mainloop()
